/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Task;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-05T22:42:21.851295576Z[Etc/UTC]", comments = "Generator version: 7.13.0")
@Validated
@Tag(name = "api", description = "the api API")
public interface ApiApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /api/tasks : Retrieve a list of tasks
     *
     * @return A list of tasks (status code 200)
     */
    @Operation(
        operationId = "apiTasksGet",
        summary = "Retrieve a list of tasks",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of tasks")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/tasks"
    )
    
    default ResponseEntity<Void> apiTasksGet(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/tasks/{id} : Delete a specific task
     *
     * @param id  (required)
     * @return Task deleted successfully (status code 204)
     */
    @Operation(
        operationId = "apiTasksIdDelete",
        summary = "Delete a specific task",
        responses = {
            @ApiResponse(responseCode = "204", description = "Task deleted successfully")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/tasks/{id}"
    )
    
    default ResponseEntity<Void> apiTasksIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/tasks/{id} : Retrieve a specific task
     *
     * @param id  (required)
     * @return Task details (status code 200)
     */
    @Operation(
        operationId = "apiTasksIdGet",
        summary = "Retrieve a specific task",
        responses = {
            @ApiResponse(responseCode = "200", description = "Task details")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/tasks/{id}"
    )
    
    default ResponseEntity<Void> apiTasksIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/tasks/{id} : Update a specific task
     *
     * @param id  (required)
     * @param task  (required)
     * @return Task updated successfully (status code 200)
     */
    @Operation(
        operationId = "apiTasksIdPut",
        summary = "Update a specific task",
        responses = {
            @ApiResponse(responseCode = "200", description = "Task updated successfully")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/api/tasks/{id}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> apiTasksIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "Task", description = "", required = true) @Valid @RequestBody Task task
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/tasks : Create a new task
     *
     * @param task  (required)
     * @return Task created successfully (status code 201)
     */
    @Operation(
        operationId = "apiTasksPost",
        summary = "Create a new task",
        responses = {
            @ApiResponse(responseCode = "201", description = "Task created successfully")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/tasks",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> apiTasksPost(
        @Parameter(name = "Task", description = "", required = true) @Valid @RequestBody Task task
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
